CREATE TABLE IF NOT EXISTS users
(
    user_id   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    user_name VARCHAR(255) NOT NULL,
    email     VARCHAR(512) NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (user_id),
    CONSTRAINT uq_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS requests
(
    request_id  BIGINT GENERATED BY DEFAULT AS IDENTITY,
    requester   BIGINT        NOT NULL,
    description VARCHAR(1024) NOT NULL,
    created     TIMESTAMP     NOT NULL,
    CONSTRAINT pk_request PRIMARY KEY (request_id),
    CONSTRAINT fk_requested_by_user FOREIGN KEY (requester) REFERENCES users (user_id) ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS items
(
    item_id     BIGINT GENERATED BY DEFAULT AS IDENTITY,
    owner_id    BIGINT,
    item_name   VARCHAR(255)  NOT NULL,
    description VARCHAR(1024) NOT NULL,
    available   BOOLEAN       NOT NULL,
    for_request BIGINT        NULL,
    CONSTRAINT pk_item PRIMARY KEY (item_id),
    CONSTRAINT fk_item_owner FOREIGN KEY (owner_id) REFERENCES users (user_id) ON UPDATE CASCADE,
    CONSTRAINT fk_added_for_request FOREIGN KEY (for_request) REFERENCES requests (request_id) ON UPDATE CASCADE,
    CONSTRAINT item_name_descr_not_blank CHECK (LENGTH(item_name) > 0 AND LENGTH(description) > 0)
);

CREATE TABLE IF NOT EXISTS bookings
(
    booking_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    for_item   BIGINT,
    by_user    BIGINT,
    start_time TIMESTAMP NOT NULL,
    end_time   TIMESTAMP NOT NULL,
    approved   BOOLEAN   NULL,
    CONSTRAINT pk_booking PRIMARY KEY (booking_id),
    CONSTRAINT fk_booking_item FOREIGN KEY (for_item) REFERENCES items (item_id) ON UPDATE CASCADE,
    CONSTRAINT fk_booking_user FOREIGN KEY (by_user) REFERENCES users (user_id) ON UPDATE CASCADE,
    CONSTRAINT end_not_before_start CHECK (start_time < end_time)
);

CREATE TABLE IF NOT EXISTS comments
(
    comment_id        BIGINT GENERATED BY DEFAULT AS IDENTITY,
    author_id         BIGINT,
    commented_item_id BIGINT,
    comment_text      VARCHAR(1024) NOT NULL,
    created           TIMESTAMP     NOT NULL,
    CONSTRAINT pk_comment PRIMARY KEY (comment_id),
    CONSTRAINT fk_comment_user FOREIGN KEY (author_id) REFERENCES users (user_id) ON UPDATE CASCADE,
    CONSTRAINT fk_comment_item FOREIGN KEY (commented_item_id) REFERENCES items (item_id) ON UPDATE CASCADE,
    CONSTRAINT com_text_not_blank CHECK (LENGTH(comment_text) > 0)
);